#!/bin/bash
# download all TIFF¹ 2013 film trailers for you
# ¹ Tromsø Internasjonale Filmfestival, www.tiff.no
# requires: youtube-dl and curl

# usage: ./tiff-dl [-n] [program-url]

# TODO
# - use standard TIFF title

parse_args() {
	while getopts ":n" opt; do
		case $opt in
			n)
				just_print_url=true
				;;
		esac
	done
	# shift getopts-parsed options away
	shift $((OPTIND-1))
}

# usage: $0 depen denci es
check_dependencies() {
	missing=
	for dependency in $@; do
		command -v $dependency > /dev/null || missing+=" $dependency"
	done
	[ "$missing" ] && echo "WARNING: Missing dependencies:$missing. Get them via homebrew."
}

# usage: $0 film-url
youtube="youtube.com/watch\?"
vimeo="vimeo.com/\?v="
vimeofix="player.vimeo.com/video/"
get_video_url_for_film() {
	# NOTE: we're just grabbing the first matching url, that's probably fine
	# TODO: fix BSD vs. GNU sed extended regexp
	curl -s "$1" | grep -Eo "http://($youtube|$vimeo)[^\"]*" | sed "s|$vimeo|$vimeofix|" | head -1
}

# usage: $0 program-url
get_film_urls() {
	# TODO: make work with future years
	curl -s "$1" | grep -o '/en/program/2013/[^"]*' | uniq | sed 's|^/|http://tiff.no/|'
}

# usage: $0 {youtube,vimeo}-url
get_video() {
	# 22	:	mp4	[720x1280]
	youtube-dl --title "$1"

	# EXTRA: convert flv to mp4
	latest=$(ls -tc | head -1) # note the hack
	base=${latest%%.*}
	ext=${latest##*.}
	[ "$ext" == "flv" ] && {
		echo INFO: converting $latest to ….mp4
		ffmpeg -v warning -i $latest -codec copy $base.mp4 && rm $latest
	}
}

# usage: $0 mul tip le film url s
get_films() {
	let count=0
	for film; do
		echo INFO: $((++count))/$# $film
		url=$(get_video_url_for_film $film)
		[ "$url" ] || continue
		[ "$just_print_url" ] && echo $url || get_video $url
	done
}

parse_args $@
check_dependencies youtube-dl curl
program=${1:-"http://tiff.no/en/program/"}

echo INFO: getting main program from $program
get_films $(get_film_urls $program)
